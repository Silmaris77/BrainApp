import streamlit as st
from utils.components import zen_header, zen_button, notification, skill_node
from utils.material3_components import apply_material3_theme
from utils.layout import get_device_type, responsive_grid, responsive_container, toggle_device_view
from data.users import load_user_data, save_user_data
import random

def show_skill_tree():
    # Zastosuj style Material 3
    apply_material3_theme()
    
    # Opcja wyboru urzƒÖdzenia w trybie deweloperskim
    if st.session_state.get('dev_mode', False):
        toggle_device_view()
    
    # Pobierz aktualny typ urzƒÖdzenia
    device_type = get_device_type()
    
    # Inicjalizacja trybu ciemnego
    if 'dark_mode' not in st.session_state:
        st.session_state.dark_mode = False
    
    # Dodaj CSS z nowymi stylami
    add_custom_css()
    
    # Inicjalizuj stan kontekstowego menu
    if 'context_menu_open' not in st.session_state:
        st.session_state.context_menu_open = False
        st.session_state.context_menu_category = None
    
    # Pobierz dane u≈ºytkownika
    users_data = load_user_data()
    user_data = users_data.get(st.session_state.username, {})
    user_skills = user_data.get("skills", {})
    user_xp = user_data.get("xp", 0)
    user_completed_lessons = set(user_data.get("completed_lessons", []))
      # Definicja blok√≥w tematycznych - ZAKTUALIZOWANE dla Neurolider√≥w
    blocks = {
        1: {
            'name': 'üî• Blok 1: Neurobiologia przyw√≥dztwa',
            'description': 'Poznaj neurobiologiczne podstawy przyw√≥dztwa, wp≈Çyw m√≥zgu na emocje i decyzje lider√≥w.',
            'categories': [1, 2, 3],  # ID kategorii nale≈ºƒÖcych do tego bloku (modu≈Çy 1, 2, 3)
            'color': 'linear-gradient(135deg, #FF9950, #FF5E62)'
        },
        2: {
            'name': 'üß† Blok 2: Procesy decyzyjne lidera',
            'description': 'Modele podejmowania decyzji, b≈Çƒôdy poznawcze i neurologiczne aspekty zmiany w przyw√≥dztwie.',
            'categories': [4, 5, 6],
            'color': 'linear-gradient(135deg, #43C6AC, #191654)'
        },
        3: {
            'name': 'üåç Blok 3: Psychologia i motywacja w przyw√≥dztwie',
            'description': 'Motywowanie siebie i innych, radzenie sobie ze stresem i zarzƒÖdzanie emocjami w przyw√≥dztwie.',
            'categories': [7, 8, 9],
            'color': 'linear-gradient(135deg, #6DD5FA, #2980B9)'
        },
        4: {
            'name': 'üí™ Blok 4: Praktyczne aspekty neuroprzyw√≥dztwa',
            'description': 'Budowanie odporno≈õci, efektywno≈õƒá przyw√≥dcza i neuroprzyw√≥dztwo w kontek≈õcie globalnym.',
            'categories': [10, 11, 12],
            'color': 'linear-gradient(135deg, #8E2DE2, #4A00E0)'
        },
        5: {
            'name': 'üåç Blok 5: Przysz≈Ço≈õƒá neuroprzyw√≥dztwa',
            'description': 'Wyzwania przysz≈Ço≈õci, praca z umys≈Çem lidera i transformacja przyw√≥dcza.',
            'categories': [13, 14, 15],
            'color': 'linear-gradient(135deg, #56ab2f, #a8e063)'
        }
    }
      # Definicja kategorii (modu≈Ç√≥w) - ZAKTUALIZOWANE dla Neurolider√≥w
    categories = {
        1: {
            'name': 'üß† Wprowadzenie do neuroprzyw√≥dztwa',
            'id': 'neuro_leadership_intro',
            'block': 1,
            'icon': 'üß†',
            'description': 'Podstawy neuroprzyw√≥dztwa, struktura m√≥zgu lidera i neurobiologiczne podstawy podejmowania decyzji',
            'lessons': get_lessons_for_category(1),
            'level': user_skills.get('neuro_leadership_intro', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,  # Zawsze odblokowane
            'cost': 50  # Koszt ulepszenia w XP
        },
        2: {
            'name': 'üí° M√≥zg, emocje i decyzje',
            'id': 'brain_emotions_decisions',
            'block': 1,
            'icon': 'üí°',
            'description': 'Wp≈Çyw emocji na decyzje lider√≥w, rola uk≈Çadu limbicznego i inteligencja emocjonalna',
            'lessons': get_lessons_for_category(2),
            'level': user_skills.get('brain_emotions_decisions', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 60
        },
        3: {
            'name': 'Mechanizmy m√≥zgu w interakcjach spo≈Çecznych',
            'id': 'brain_social_interactions',            'block': 1,
            'icon': 'üë•',
            'description': 'Wsp√≥≈Çczucie i empatia w przyw√≥dztwie, neurologiczne podstawy komunikacji i budowanie relacji',
            'lessons': get_lessons_for_category(3),
            'level': user_skills.get('brain_social_interactions', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 70
        },
        4: {
            'name': '‚öñÔ∏è Modele podejmowania decyzji',
            'id': 'decision_models',
            'block': 2,
            'icon': '‚öñÔ∏è',
            'description': 'Teoria perspektywy, heurystyki, model SEEDS i analiza ryzyka w podejmowaniu decyzji',
            'lessons': get_lessons_for_category(4),
            'level': user_skills.get('decision_models', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 80
        },
        5: {
            'name': 'B≈Çƒôdy poznawcze w decyzjach',
            'id': 'cognitive_biases_leadership',
            'block': 2,
            'icon': '‚ö†Ô∏è',
            'description': 'Rozpoznawanie i przeciwdzia≈Çanie b≈Çƒôdom poznawczym w decyzjach lider√≥w',
            'lessons': get_lessons_for_category(5),
            'level': user_skills.get('cognitive_biases_leadership', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 80
        },        6: {
            'name': 'Neurologiczne aspekty zmiany i innowacji',
            'id': 'neuro_change_innovation',
            'block': 2,
            'icon': 'üîÑ',
            'description': 'Neuroplastyczno≈õƒá, reakcje m√≥zgu na zmiany i neurobiologia innowacji i kreatywno≈õci',
            'lessons': get_lessons_for_category(6),
            'level': user_skills.get('neuro_change_innovation', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 80
        },
        7: {
            'name': 'Motywowanie siebie i innych',
            'id': 'motivation_leadership',
            'block': 3,
            'icon': 'üî•',
            'description': 'Neurobiologia motywacji, budowanie zaanga≈ºowania i wzmacnianie poczucia sensu w zespole',
            'lessons': get_lessons_for_category(7),
            'level': user_skills.get('motivation_leadership', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 90
        },
        8: {
            'name': 'Neurobiologia stresu w przyw√≥dztwie',
            'id': 'stress_neurobiology',
            'block': 3,
            'icon': 'üòì',
            'description': 'Mechanizmy neurobiologiczne stresu i techniki zarzƒÖdzania stresem dla lider√≥w',
            'lessons': get_lessons_for_category(8),
            'level': user_skills.get('stress_neurobiology', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 90
        },        9: {
            'name': 'Rola emocji w przyw√≥dztwie',
            'id': 'emotions_leadership',
            'block': 3,
            'icon': '‚ù§Ô∏è',
            'description': 'Inteligencja emocjonalna, zarzƒÖdzanie emocjami w trudnych sytuacjach i empatia w przyw√≥dztwie',
            'lessons': get_lessons_for_category(9),
            'level': user_skills.get('emotions_leadership', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 100
        },
        10: {
            'name': 'Budowanie odporno≈õci lidera',
            'id': 'leader_resilience',
            'block': 4,
            'icon': 'üõ°Ô∏è',
            'description': 'Odporno≈õƒá psychiczna, radzenie sobie z kryzysami i przekszta≈Çcanie pora≈ºek w do≈õwiadczenia',
            'lessons': get_lessons_for_category(10),
            'level': user_skills.get('leader_resilience', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 100
        },
        11: {
            'name': 'Efektywno≈õƒá przyw√≥dcza w praktyce',
            'id': 'leadership_effectiveness',
            'block': 4,
            'icon': 'üìä',
            'description': 'Praktyczne zastosowanie neuroprzyw√≥dztwa, delegowanie zada≈Ñ i budowanie kultury organizacyjnej',
            'lessons': get_lessons_for_category(11),            'level': user_skills.get('leadership_effectiveness', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 110
        },12: {
            'name': 'Neuroprzyw√≥dztwo w kontek≈õcie globalnym',
            'id': 'global_neuroleadership',
            'block': 4,
            'icon': 'üåç',
            'description': 'Przyw√≥dztwo w zespo≈Çach wielokulturowych, adaptacja styl√≥w i globalne trendy',
            'lessons': get_lessons_for_category(12),
            'level': user_skills.get('global_neuroleadership', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 110
        },        13: {
            'name': 'Wyzwania przysz≈Ço≈õci',
            'id': 'future_challenges',
            'block': 5,
            'icon': 'üîÆ',
            'description': 'Przyw√≥dztwo w erze AI, etyczne aspekty neurotechnologii i przysz≈Çe trendy neuroprzyw√≥dztwa',
            'lessons': get_lessons_for_category(13),
            'level': user_skills.get('future_challenges', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 120
        },        14: {
            'name': 'Praca z umys≈Çem lidera',
            'id': 'leader_mind_work',
            'block': 5,
            'icon': 'üß†',
            'description': 'Mindfulness dla lider√≥w, techniki koncentracji i zarzƒÖdzanie stresem w warunkach presji',
            'lessons': get_lessons_for_category(14),
            'level': user_skills.get('leader_mind_work', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 120
        },        15: {
            'name': 'Transformacja przyw√≥dcza',
            'id': 'leadership_transformation',
            'block': 5,
            'icon': 'üîÑ',
            'description': 'Modele transformacji, coaching oparty na neuronaukach i budowanie uczƒÖcej siƒô organizacji',
            'lessons': get_lessons_for_category(15),
            'level': user_skills.get('leadership_transformation', {}).get('level', 0),
            'max_level': 10,
            'unlocked': True,
            'cost': 150
        }
    }
    
    # Zaktualizuj wszystkie kategorie jako odblokowane
    for cat_id in categories:
        categories[cat_id]['unlocked'] = True
      # Header i nowy tytu≈Ç
    st.markdown("<h1 class='skills-header'>Mapa Rozwoju Neurolider√≥w üß†</h1>", unsafe_allow_html=True)
    
    # Dashboard postƒôpu
    show_progress_dashboard(user_skills, user_xp, user_completed_lessons, categories)
    
    # Opcje filtrowania
    st.markdown("<h3 class='section-header'>Filtrowanie umiejƒôtno≈õci</h3>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    
    with col1:
        filter_option = st.selectbox(
            "Poka≈º umiejƒôtno≈õci:",
            ["Wszystkie", "W trakcie nauki", "Uko≈Ñczone", "Nierozpoczƒôte"],
            index=0
        )
    
    with col2:
        sort_option = st.selectbox(
            "Sortuj wed≈Çug:",
            ["Bloku tematycznego", "Poziomu (rosnƒÖco)", "Poziomu (malejƒÖco)", "Alfabetycznie"],
            index=0
        )

    # Sekcja blok√≥w ze zmienionƒÖ wizualizacjƒÖ
    for block_id, block in blocks.items():
        display_block_with_skills(block_id, block, categories, user_skills, user_xp, users_data, 
                                  user_data, user_completed_lessons, filter_option, device_type)


def show_progress_dashboard(user_skills, user_xp, user_completed_lessons, categories):
    """Wy≈õwietla dashboard postƒôpu u≈ºytkownika"""
    
    # Oblicz ≈õredni poziom umiejƒôtno≈õci
    skill_levels = [skill.get('level', 0) for skill in user_skills.values()]
    avg_level = sum(skill_levels) / len(skill_levels) if skill_levels else 0
    
    # Oblicz ca≈Çkowity postƒôp (jako procent wszystkich mo≈ºliwych umiejƒôtno≈õci)
    total_possible_skills = sum(cat['max_level'] for cat in categories.values())
    current_total_level = sum(skill_levels)
    overall_progress = (current_total_level / total_possible_skills) * 100 if total_possible_skills > 0 else 0
    
    # Znajd≈∫ najwy≈ºszy poziom umiejƒôtno≈õci
    max_skill_level = max(skill_levels) if skill_levels else 0
    
    # Liczba uko≈Ñczonych lekcji
    completed_lessons_count = len(user_completed_lessons)
    
    # Oblicz estymowany czas do uko≈Ñczenia (w dniach)
    total_lessons = sum(len(cat['lessons']) for cat in categories.values())
    remaining_lessons = total_lessons - completed_lessons_count
    estimated_completion_days = max(1, int(remaining_lessons / 2))  # Zak≈ÇadajƒÖc 2 lekcje dziennie
    
    # Dashboard z statystykami
    st.markdown("<div class='progress-dashboard'>", unsafe_allow_html=True)
    
    cols = st.columns(5)  # Zwiƒôkszamy ilo≈õƒá kolumn, aby dodaƒá nowƒÖ statystykƒô
    
    with cols[0]:
        st.markdown(f"""
        <div class='stat-card'>
            <div class='stat-icon'>üèÜ</div>
            <div class='stat-value'>{int(overall_progress)}%</div>
            <div class='stat-label'>Ca≈Çkowity postƒôp</div>
        </div>
        """, unsafe_allow_html=True)
    
    with cols[1]:
        st.markdown(f"""
        <div class='stat-card'>
            <div class='stat-icon'>üìö</div>
            <div class='stat-value'>{completed_lessons_count}</div>
            <div class='stat-label'>Uko≈Ñczone lekcje</div>
        </div>
        """, unsafe_allow_html=True)
        
    with cols[2]:  # Naprawiam ten fragment - usuwam dwukropek
        st.markdown(f"""
        <div class='stat-card'>
            <div class='stat-icon'>‚≠ê</div>
            <div class='stat-value'>{int(avg_level)}</div>
            <div class='stat-label'>≈öredni poziom</div>
        </div>
        """, unsafe_allow_html=True)
        
    with cols[3]:
        st.markdown(f"""
        <div class='stat-card'>
            <div class='stat-icon'>üíé</div>
            <div class='stat-value'>{user_xp}</div>
            <div class='stat-label'>Posiadane XP</div>
        </div>
        """, unsafe_allow_html=True)
    
    with cols[4]:
        st.markdown(f"""
        <div class='stat-card'>
            <div class='stat-icon'>‚è±Ô∏è</div>
            <div class='stat-value'>{estimated_completion_days}</div>
            <div class='stat-label'>Dni do uko≈Ñczenia</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Dodaj wizualizacjƒô postƒôpu w r√≥≈ºnych blokach umiejƒôtno≈õci
    # Zbierz dane o postƒôpie w ka≈ºdym bloku
    block_progress = {}
    blocks_data = {}
    
    for cat_id, category in categories.items():
        block_id = category['block']
        
        # Inicjalizuj dane dla bloku je≈õli nie istniejƒÖ
        if block_id not in blocks_data:
            blocks_data[block_id] = {
                'total_lessons': 0,
                'completed_lessons': 0,
                'name': f"Blok {block_id}"
            }
        
        # Dodaj lekcje do bloku
        category_lessons = category['lessons']
        blocks_data[block_id]['total_lessons'] += len(category_lessons)
        
        # Policz uko≈Ñczone lekcje
        for lesson in category_lessons:
            if lesson['id'] in user_completed_lessons:
                blocks_data[block_id]['completed_lessons'] += 1
    
    # Oblicz procent uko≈Ñczenia dla ka≈ºdego bloku
    for block_id, data in blocks_data.items():
        if data['total_lessons'] > 0:
            completion_percent = (data['completed_lessons'] / data['total_lessons']) * 100
        else:
            completion_percent = 0
        
        block_progress[block_id] = {
            'name': data['name'],
            'progress': completion_percent
        }
    
    # Wy≈õwietl wykres postƒôpu blok√≥w
    st.markdown("<h4 class='chart-title'>Postƒôp w blokach tematycznych</h4>", unsafe_allow_html=True)
    
    # Tworzenie danych dla wykresu
    chart_data = []
    for block_id, data in block_progress.items():
        chart_data.append({
            'Blok': f"Blok {block_id}",
            'Postƒôp (%)': data['progress']
        })
    
    if chart_data:
        import pandas as pd
        import altair as alt
        
        # Konwertuj do dataframe
        df = pd.DataFrame(chart_data)
        
        # Stw√≥rz wykres
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('Blok:N', sort=None),
            y=alt.Y('Postƒôp (%):Q', scale=alt.Scale(domain=[0, 100])),
            color=alt.Color('Blok:N', scale=alt.Scale(scheme='category10')),
            tooltip=['Blok', 'Postƒôp (%)'
        ]).properties(
            width='container',
            height=200
        ).configure_axis(
            labelFontSize=12,
            titleFontSize=14
        )
        
        st.altair_chart(chart, use_container_width=True)
    
    # Kr√≥tka informacja o mechanice zdobywania poziom√≥w
    st.markdown("""
        <div class="info-box">
            <h4>üìã Jak zdobywaƒá poziomy umiejƒôtno≈õci?</h4>
            <p>Ka≈ºda uko≈Ñczona lekcja zwiƒôksza poziom danej umiejƒôtno≈õci. Uko≈Ñcz wszystkie 10 lekcji, aby osiƒÖgnƒÖƒá maksymalny poziom!</p>
            <p>Wszystkie kategorie umiejƒôtno≈õci sƒÖ od razu dostƒôpne - mo≈ºesz rozpoczƒÖƒá naukƒô od dowolnego tematu.</p>
        </div>
    """, unsafe_allow_html=True)


def display_block_with_skills(block_id, block, categories, user_skills, user_xp, users_data, 
                             user_data, user_completed_lessons, filter_option, device_type):
    """Wy≈õwietla blok tematyczny z kartami umiejƒôtno≈õci w nowym uk≈Çadzie"""
    
    # Nag≈Ç√≥wek bloku z nowym stylem
    st.markdown(f"""
        <div class="skill-block-header" style="background: {block['color']}">
            <h2>{block['name']}</h2>
            <p>{block['description']}</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Znajd≈∫ kategorie nale≈ºƒÖce do bloku
    block_categories = [cat_id for cat_id, cat in categories.items() if cat['block'] == block_id]
    
    # Filtrowanie kategorii
    filtered_categories = []
    for cat_id in block_categories:
        category = categories[cat_id]
        category_lessons_ids = [lesson["id"] for lesson in category['lessons']]
        completed_category_lessons = [lesson_id for lesson_id in user_completed_lessons if lesson_id in category_lessons_ids]
        lessons_completed_count = len(completed_category_lessons)
        
        # Filtruj wed≈Çug wybranych opcji
        if filter_option == "W trakcie nauki" and (lessons_completed_count == 0 or lessons_completed_count == 10):
            continue
        elif filter_option == "Uko≈Ñczone" and lessons_completed_count < 10:
            continue
        elif filter_option == "Nierozpoczƒôte" and lessons_completed_count > 0:
            continue
        
        filtered_categories.append(cat_id)
    
    if not filtered_categories:
        st.info(f"Brak umiejƒôtno≈õci spe≈ÇniajƒÖcych kryteria filtrowania w bloku '{block['name']}'")
        return
    
    # Okre≈õl liczbƒô kolumn w zale≈ºno≈õci od urzƒÖdzenia
    if device_type == 'mobile':
        num_cols = 1
    elif device_type == 'tablet':
        num_cols = 2
    else:
        num_cols = 1
    
    # Utw√≥rz siatkƒô dla kart umiejƒôtno≈õci
    cols = st.columns(num_cols)
    
    # Wy≈õwietl karty umiejƒôtno≈õci
    for i, cat_id in enumerate(filtered_categories):
        category = categories[cat_id]
        with cols[i % num_cols]:
            display_skill_card(category, user_completed_lessons, user_skills, users_data, user_data, card_index=i)


def display_skill_card(category, user_completed_lessons, user_skills, users_data, user_data, card_index=0):
    """Wy≈õwietla kartƒô umiejƒôtno≈õci w nowym stylu"""
    
    # Oblicz poziom na podstawie uko≈Ñczonych lekcji
    category_lessons_ids = [lesson["id"] for lesson in category['lessons']]
    completed_category_lessons = [lesson_id for lesson_id in user_completed_lessons if lesson_id in category_lessons_ids]
    lessons_completed_count = len(completed_category_lessons)
    
    # Poziom = liczba uko≈Ñczonych lekcji (max 10)
    calculated_level = min(lessons_completed_count, 10)
    
    # Aktualizuj poziom w danych u≈ºytkownika je≈õli siƒô zmieni≈Ç
    if calculated_level != category['level']:
        if category['id'] not in user_skills:
            user_skills[category['id']] = {'level': 0}
        
        user_skills[category['id']]['level'] = calculated_level
        user_data['skills'] = user_skills
        users_data[st.session_state.username] = user_data
        save_user_data(users_data)
    
    # Wy≈õwietl kartƒô umiejƒôtno≈õci w nowoczesnym stylu
    progress = int((calculated_level / category['max_level']) * 100)
    card_status = "max-level" if calculated_level == category['max_level'] else "in-progress" if calculated_level > 0 else "not-started"
    
    # Unikalny identyfikator karty
    card_id = f"skill-card-{category['id']}"
    
    # Dodaj obs≈Çugƒô menu kontekstowego
    context_menu_html = f"""
    <div id="context-menu-{card_id}" class="context-menu" style="display: none;">
        <div class="context-menu-item" onclick="showLessons('{category['id']}')">
            <span class="context-menu-item-icon">üìö</span>
            <span>Poka≈º lekcje</span>
        </div>
        <div class="context-menu-divider"></div>
        <div class="context-menu-item" onclick="hideMenu()">
            <span class="context-menu-item-icon">‚ùå</span>
            <span>Zamknij</span>
        </div>
    </div>
    """
    
    st.markdown(f"""
    <div id="{card_id}" class="skill-card {card_status}" style="--card-index: {card_index};" 
         oncontextmenu="showContextMenu(event, '{card_id}'); return false;">
        <div class="skill-card-icon">{category['icon']}</div>
        <h4>{category['name']}</h4>
        <div class="level-indicator">Poziom {calculated_level}/{category['max_level']}</div>
        <div class="skill-progress-bar">
            <div class="skill-progress" style="width: {progress}%;"></div>
        </div>
        <p class="skill-description">{category['description']}</p>
        <p class="completed-lessons">Uko≈Ñczone lekcje: {lessons_completed_count}/10</p>
    </div>
    {context_menu_html}
    
    <script>
    function showContextMenu(event, cardId) {{
        // Ukryj wszystkie inne menu
        document.querySelectorAll('.context-menu').forEach(menu => {{
            menu.style.display = 'none';
        }});
        
        // Poka≈º menu dla tej karty
        const menu = document.getElementById('context-menu-' + cardId);
        menu.style.display = 'block';
        menu.style.left = event.pageX + 'px';
        menu.style.top = event.pageY + 'px';
        
        // Zamknij menu po klikniƒôciu poza nim
        document.addEventListener('click', function closeMenu(e) {{
            if (!menu.contains(e.target)) {{
                menu.style.display = 'none';
                document.removeEventListener('click', closeMenu);
            }}
        }});
    }}
    
    function hideMenu() {{
        document.querySelectorAll('.context-menu').forEach(menu => {{
            menu.style.display = 'none';
        }});
    }}
      function showLessons(categoryId) {{
        // Znajd≈∫ i kliknij odpowiedni przycisk
        document.querySelector(`button[key="btn_show_lessons_${{categoryId}}"]`).click();
    }}
    </script>
    """, unsafe_allow_html=True)
    
    # Przyciski akcji - ZMODYFIKOWANE, BEZ "UKO≈ÉCZ WSZYSTKIE"
    col1, col2 = st.columns(2)  # Zmienione z 3 na 2 kolumny
    
    with col1:
        # Przycisk do pokazania lekcji
        if st.button(f"Poka≈º lekcje", key=f"btn_show_lessons_{category['id']}"):
            lessons_state_key = f"show_lessons_{category['id']}"
            st.session_state[lessons_state_key] = not st.session_state.get(lessons_state_key, False)
            # Ukryj analitykƒô, je≈õli by≈Ça otwarta
            analytics_state_key = f"show_analytics_{category['id']}"
            if st.session_state.get(analytics_state_key, False):
                st.session_state[analytics_state_key] = False
    
    with col2:
        # Przycisk do pokazania analityki
        if st.button(f"Analityka", key=f"btn_show_analytics_{category['id']}"):
            analytics_state_key = f"show_analytics_{category['id']}"
            st.session_state[analytics_state_key] = not st.session_state.get(analytics_state_key, False)
            # Ukryj lekcje, je≈õli by≈Çy otwarte
            lessons_state_key = f"show_lessons_{category['id']}"
            if st.session_state.get(lessons_state_key, False):
                st.session_state[lessons_state_key] = False
    
    # Usuniƒôto przycisk "Uko≈Ñcz wszystkie" i trzeciƒÖ kolumnƒô
    
    # Wy≈õwietl lekcje je≈õli przycisk zosta≈Ç naci≈õniƒôty
    lessons_state_key = f"show_lessons_{category['id']}"
    if st.session_state.get(lessons_state_key, False):
        display_category_lessons(category, calculated_level, user_completed_lessons)
    
    # Wy≈õwietl analitykƒô je≈õli przycisk zosta≈Ç naci≈õniƒôty
    analytics_state_key = f"show_analytics_{category['id']}"
    if st.session_state.get(analytics_state_key, False):
        show_skill_analytics(category, user_completed_lessons)


def display_category_lessons(category, current_level, completed_lessons):
    """Wy≈õwietla lekcje dla danej kategorii z oznaczeniem dostƒôpno≈õci"""
    
    # Pobierz aktualny typ urzƒÖdzenia
    device_type = get_device_type()
    
    # Pobierz listƒô dostƒôpnych lekcji
    available_lessons_data = get_available_lessons()
    
    # Utw√≥rz listƒô ID dostƒôpnych lekcji dla ≈Çatwiejszego por√≥wnywania
    available_lessons_ids = []
    for lesson in available_lessons_data:
        if isinstance(lesson, dict):
            available_lessons_ids.append(lesson['id'])
        else:
            available_lessons_ids.append(lesson)
    
    st.markdown("<div class='lessons-container'>", unsafe_allow_html=True)
    
    # Dodaj obs≈Çugƒô nawigacji za pomocƒÖ klawiatury
    st.markdown("""
    <div class="keyboard-nav-info">
        <span>üí° Wskaz√≥wka: U≈ºyj klawiszy strza≈Çek ‚Üë‚Üì do nawigacji miƒôdzy lekcjami, Enter aby rozpoczƒÖƒá wybranƒÖ lekcjƒô</span>
    </div>
    """, unsafe_allow_html=True)
    
    for i, lesson in enumerate(category['lessons']):
        lesson_id = lesson['id']
        lesson_completed = lesson_id in completed_lessons
        lesson_available = lesson_id in available_lessons_ids
        
        # Generuj unikalny klucz dla przycisku
        button_key = f"lesson_{lesson_id}_{random.randint(1000,9999)}"
        
        # Dostosuj wyglƒÖd lekcji w zale≈ºno≈õci od urzƒÖdzenia
        if device_type == 'mobile':
            # Na telefonach u≈ºywamy prostszego uk≈Çadu
            lesson_status_icon = ""
            if lesson_completed:
                lesson_status_icon = "‚úÖ"
            elif not lesson_available:
                lesson_status_icon = "üîí"
            else:
                lesson_status_icon = "‚¨ú"
                
            lesson_status_class = "completed" if lesson_completed else ("unavailable" if not lesson_available else "available")
            
            st.markdown(f"""
            <div class="lesson-item {lesson_status_class}" tabindex="0" role="button" 
                 aria-label="Lekcja {i+1}: {lesson['title']}, 
                 {('uko≈Ñczona' if lesson_completed else ('niedostƒôpna' if not lesson_available else 'dostƒôpna'))}">
                <span class="lesson-title">{lesson['title']}</span>
                <span class="lesson-status">{lesson_status_icon}</span>
            </div>
            """, unsafe_allow_html=True)
            
            # Bezpo≈õredni przycisk do rozpoczƒôcia lekcji tylko dla dostƒôpnych lekcji
            if not lesson_completed and lesson_available:
                if st.button("‚ñ∂Ô∏è", key=f"start_{button_key}", help="Rozpocznij lekcjƒô"):
                    st.session_state.current_lesson = lesson_id
                    st.session_state.current_lesson_category = category['id']
                    st.session_state.page = 'lesson'
                    st.rerun()
            elif not lesson_available:
                st.button("üîí", key=f"locked_{button_key}", help="Lekcja niedostƒôpna", disabled=True)
        else:
            # Na tabletach i desktopach u≈ºywamy bardziej rozbudowanego uk≈Çadu
            col1, col2 = st.columns([5,1])
            
            with col1:
                lesson_status_class = "completed" if lesson_completed else ("unavailable" if not lesson_available else "available")
                
                st.markdown(f"""
                <div class="lesson-item {lesson_status_class}" tabindex="0" role="button" 
                     aria-label="Lekcja {i+1}: {lesson['title']}, 
                     {('uko≈Ñczona' if lesson_completed else ('niedostƒôpna' if not lesson_available else 'dostƒôpna'))}">
                    <span class="lesson-title">{lesson['title']}</span>
                    {'' if lesson_available else '<span class="lesson-locked-icon">üîí</span>'}
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                # Przycisk do oznaczania lekcji jako uko≈Ñczonej lub rozpoczƒôcia lekcji
                if lesson_completed:
                    if st.button("‚úÖ", key=f"mark_{button_key}", help="Oznacz jako nieuko≈ÑczonƒÖ"):
                        # Usu≈Ñ lekcjƒô z uko≈Ñczonych
                        users_data = load_user_data()
                        user_data = users_data.get(st.session_state.username, {})
                        user_completed = set(user_data.get("completed_lessons", []))
                        user_completed.discard(lesson_id)
                        user_data["completed_lessons"] = list(user_completed)
                        users_data[st.session_state.username] = user_data
                        save_user_data(users_data)
                        st.rerun()
                elif lesson_available:
                    if st.button("‚ñ∂Ô∏è", key=f"mark_{button_key}", help="Rozpocznij lekcjƒô"):
                        # Przejd≈∫ do lekcji
                        st.session_state.current_lesson = lesson_id
                        st.session_state.current_lesson_category = category['id']
                        st.session_state.page = 'lesson'
                        st.rerun()
                else:
                    # Lekcja niedostƒôpna - wy≈õwietl zablokowany przycisk
                    st.button("üîí", key=f"locked_{button_key}", help="Lekcja niedostƒôpna", disabled=True)
    
    st.markdown("</div>", unsafe_allow_html=True)


def add_custom_css():
    """Dodaje niestandardowe style CSS dla nowego wyglƒÖdu zak≈Çadki Umiejƒôtno≈õci"""
    
    st.markdown("""
    <style>
    /* Nowy nag≈Ç√≥wek strony */
    .skills-header {
        text-align: center;
        font-size: 2.5rem;
        background: linear-gradient(90deg, #6DD5FA, #2980B9);
        color: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    /* Dashboard postƒôpu */
    .progress-dashboard {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 30px;
    }
    
    .stat-card {
        background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(240,240,250,0.9));
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        text-align: center;
        transition: all 0.3s ease;
        height: 100%;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .stat-icon {
        font-size: 2rem;
        margin-bottom: 10px;
    }
    
    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #2980B9;
    }
    
    .stat-label {
        font-size: 0.9rem;
        color: #555;
    }
    
    /* Nag≈Ç√≥wki blok√≥w umiejƒôtno≈õci */
    .section-header {
        margin: 30px 0 15px 0;
        font-size: 1.5rem;
        color: #333;
        border-bottom: 2px solid #eee;
        padding-bottom: 10px;
    }
    
    .skill-block-header {
        background: linear-gradient(135deg, #6DD5FA, #2980B9);
        border-radius: 15px;
        padding: 20px;
        margin: 30px 0 20px 0;
        color: white;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .skill-block-header:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    
    .skill-block-header h2 {
        margin: 0 0 10px 0;
        font-size: 1.8rem;
    }
    
    .skill-block-header p {
        margin: 0;
        opacity: 0.9;
        font-size: 1rem;
    }
    
    /* Karty umiejƒôtno≈õci */
    .skill-card {
        background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(245,245,255,0.9));
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        border-left: 4px solid #ccc;
    }
    
    .skill-card.not-started {
        border-left-color: #ccc;
    }
    
    .skill-card.in-progress {
        border-left-color: #3498db;
    }
    
    .skill-card.max-level {
        border-left-color: #27ae60;
    }
    
    .skill-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .skill-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 5px;
        background: linear-gradient(90deg, transparent, rgba(100,180,255,0.3), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .skill-card:hover::before {
        opacity: 1;
    }
    
    .skill-card-icon {
        font-size: 2rem;
        margin-bottom: 10px;
        display: inline-block;
    }
    
    .skill-card h4 {
        margin: 0 0 10px 0;
        color: #333;
        font-size: 1.3rem;
    }
    
    .skill-description {
        color: #555;
        margin-bottom: 15px;
        font-size: 0.9rem;
    }
    
    .level-indicator {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 8px;
    }
    
    .skill-progress-bar {
        height: 8px;
        background: rgba(200,200,220,0.3);
        border-radius: 4px;
        margin: 10px 0;
        overflow: hidden;
    }
    
    .skill-progress {
        height: 100%;
        background: linear-gradient(90deg, #3498db, #2ecc71);
        border-radius: 4px;
        transition: width 0.8s ease;
    }
    
    .completed-lessons {
        margin-top: 15px;
        font-size: 0.85rem;
        color: #555;
    }
    
    .skill-card.max-level .completed-lessons {
        color: #27ae60;
        font-weight: bold;
    }
    
    /* Lekcje */
    .lessons-container {
        background: rgba(245,245,255,0.7);
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0 20px 0;
        border-left: 3px solid #3498db;
    }
    
    .lesson-item {
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 8px;
        background: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        cursor: pointer;
    }
    
    .lesson-item:hover {
        transform: translateX(5px);
        box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }
    
    .lesson-item:focus {
        outline: 2px solid #3498db;
        box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.3);
        transform: translateX(5px);
    }
    
    .lesson-item.completed {
        border-left: 3px solid #27ae60;
    }
    
    .lesson-item.available {
        border-left: 3px solid #3498db;
    }
    
    .lesson-item.unavailable {
        border-left: 3px solid #bbb;
        opacity: 0.7;
        background-color: #f5f5f5;
        cursor: not-allowed;
    }
    
    .lesson-item.unavailable:hover {
        transform: none;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .lesson-title {
        font-weight: 500;
        color: #333;
    }
    
    .lesson-status {
        font-size: 18px;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Info box */
    .info-box {
        background: linear-gradient(135deg, rgba(100, 180, 255, 0.1) 0%, rgba(70, 150, 220, 0.2) 100%);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
        border: 1px solid rgba(70, 150, 220, 0.2);
        box-shadow: 0 3px 10px rgba(0,0,0,0.03);
    }
    
    .info-box h4 {
        margin-top: 0;
        color: #2980B9;
        font-size: 1.2rem;
    }
    
    /* Menu kontekstowe */
    .context-menu {
        position: absolute;
        background: white;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        padding: 10px 0;
        z-index: 1000;
        min-width: 200px;
        animation: fadeIn 0.2s ease;
    }
    
    .context-menu-item {
        padding: 8px 15px;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
    }
    
    .context-menu-item:hover {
        background: rgba(52, 152, 219, 0.1);
    }
    
    .context-menu-item-icon {
        margin-right: 10px;
        font-size: 16px;
        width: 20px;
        text-align: center;
    }
    
    .context-menu-divider {
        height: 1px;
        background: #eee;
        margin: 5px 0;
    }
    
    /* Wskaz√≥wki nawigacji klawiaturƒÖ */
    .keyboard-nav-info {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 15px;
        padding: 8px 12px;
        background-color: rgba(52, 152, 219, 0.1);
        border-radius: 6px;
        border-left: 3px solid #3498db;
    }
    
    /* Animacje przej≈õƒá */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .skill-card {
        animation: fadeIn 0.5s ease forwards;
        opacity: 0;
        animation-delay: calc(var(--card-index, 0) * 0.1s);
    }
    
    /* Responsywno≈õƒá */
    @media (max-width: 768px) {
        .skills-header {
            font-size: 1.8rem;
            padding: 15px;
        }
        
        .stat-icon {
            font-size: 1.5rem;
        }
        
        .stat-value {
            font-size: 1.4rem;
        }
        
        .skill-block-header h2 {
            font-size: 1.5rem;
        }
        
        .skill-card h4 {
            font-size: 1.2rem;
        }
        
        .keyboard-nav-info {
            display: none; /* Ukryj na telefonach */
        }
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Dodaj skrypt JavaScript dla obs≈Çugi nawigacji klawiaturƒÖ
    st.markdown("""
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const lessonItems = document.querySelectorAll('.lesson-item');
        let currentFocus = -1;
        
        // Dodaj op√≥≈∫nione animacje dla kart umiejƒôtno≈õci
        document.querySelectorAll('.skill-card').forEach((card, index) => {
            card.style.setProperty('--card-index', index);
        });
        
        // Obs≈Çuga nawigacji klawiaturƒÖ
        document.addEventListener('keydown', (e) => {
            // Strza≈Çka w d√≥≈Ç
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                if (currentFocus < lessonItems.length - 1) {
                    currentFocus++;
                    lessonItems[currentFocus].focus();
                }
            }
            // Strza≈Çka w g√≥rƒô
            else if (e.key === 'ArrowUp') {
                e.preventDefault();
                if (currentFocus > 0) {
                    currentFocus--;
                    lessonItems[currentFocus].focus();
                }
            }
            // Enter - symuluj klikniƒôcie
            else if (e.key === 'Enter' && currentFocus >= 0) {
                e.preventDefault();
                lessonItems[currentFocus].click();
            }
        });
        
        // Klikniƒôcie w lekcjƒô
        lessonItems.forEach((item, index) => {
            item.addEventListener('focus', () => {
                currentFocus = index;
            });
            
            item.addEventListener('click', () => {
                // Znajd≈∫ przycisk rozpoczƒôcia dla tego elementu i kliknij go
                const buttons = document.querySelectorAll(`button[kind="secondary"]`);
                buttons.forEach(button => {
                    if (button.textContent.includes('Rozpocznij lekcjƒô') || 
                        button.textContent.includes('‚ñ∂Ô∏è')) {
                        button.click();
                    }
                });
            });
        });
    });
    </script>
    """, unsafe_allow_html=True)


def get_lessons_for_category(category_id):
    """Generuje listƒô lekcji dla danej kategorii na podstawie danych kursu dla Neurolider√≥w"""
    
    # Dane lekcji dla poszczeg√≥lnych kategorii - ZAKTUALIZOWANE dla Neurolider√≥w
    lessons_data = {
        1: [  # Wprowadzenie do neuroprzyw√≥dztwa
            {"id": "B1C1L1", "title": "Co to jest neuroprzyw√≥dztwo?"},
            {"id": "B1C1L2", "title": "M√≥zg lidera ‚Äì struktura i funkcje"},
            {"id": "B1C1L3", "title": "Neuronaukowe podstawy podejmowania decyzji"},
            {"id": "B1C1L4", "title": "Jak m√≥zg przetwarza stres i zmienno≈õƒá?"},
            {"id": "B1C1L5", "title": "Neurobiologia emocji a zarzƒÖdzanie"},
            {"id": "B1C1L6", "title": "Rola oksytocyny w przyw√≥dztwie"},
            {"id": "B1C1L7", "title": "Dopamina ‚Äì motywacja i nagroda"},
            {"id": "B1C1L8", "title": "Neuroprzyw√≥dztwo a zarzƒÖdzanie stresem"},
            {"id": "B1C1L9", "title": "Przewodzenie w kontek≈õcie teorii neurobiologicznych"},
            {"id": "B1C1L10", "title": "Neuroprzyw√≥dztwo w praktyce ‚Äì przyk≈Çady z ≈ºycia"}
        ],
        2: [  # M√≥zg, emocje i decyzje
            {"id": "B1C2L1", "title": "Jak emocje wp≈ÇywajƒÖ na decyzje lider√≥w?"},
            {"id": "B1C2L2", "title": "Rola limbicznego uk≈Çadu w podejmowaniu decyzji"},
            {"id": "B1C2L3", "title": "Przeciwdzia≈Çanie b≈Çƒôdom poznawczym"},
            {"id": "B1C2L4", "title": "Jak zrozumieƒá emocje w pracy zespo≈Çowej?"},
            {"id": "B1C2L5", "title": "Mechanizmy adaptacji do stresu"},
            {"id": "B1C2L6", "title": "Inteligencja emocjonalna lidera"},
            {"id": "B1C2L7", "title": "Decyzje pod wp≈Çywem emocji a efektywno≈õƒá"},
            {"id": "B1C2L8", "title": "M√≥zg a odporno≈õƒá na krytykƒô"},
            {"id": "B1C2L9", "title": "Przyk≈Çady z ≈ºycia lider√≥w: jak radzili sobie z emocjami"},
            {"id": "B1C2L10", "title": "Neurobiologia wsp√≥≈Çczucia w przyw√≥dztwie"}
        ],
        3: [  # Mechanizmy m√≥zgu w interakcjach spo≈Çecznych
            {"id": "B1C3L1", "title": "Wsp√≥≈Çczucie jako narzƒôdzie przyw√≥dcze"},
            {"id": "B1C3L2", "title": "Jak m√≥zg interpretuje zachowanie innych?"},
            {"id": "B1C3L3", "title": "Neurologiczne podstawy komunikacji"},
            {"id": "B1C3L4", "title": "ZarzƒÖdzanie konfliktem ‚Äì m√≥zg i emocje"},
            {"id": "B1C3L5", "title": "Teoria przyw√≥dztwa opartego na empatii"},
            {"id": "B1C3L6", "title": "M√≥zg gadzi vs. racjonalny: jak to wp≈Çywa na decyzje?"},
            {"id": "B1C3L7", "title": "Jak skutecznie motywowaƒá zesp√≥≈Ç?"},
            {"id": "B1C3L8", "title": "Mechanizmy wp≈Çywu i perswazji"},
            {"id": "B1C3L9", "title": "Neuroprzyw√≥dztwo a budowanie relacji"},
            {"id": "B1C3L10", "title": "M√≥zg a dynamika grupy"}
        ],        4: [  # Modele podejmowania decyzji
            {"id": "B2C4L1", "title": "Wprowadzenie do modeli decyzyjnych"},
            {"id": "B2C4L2", "title": "Teoria perspektywy i jej zastosowanie w decyzjach"},
            {"id": "B2C4L3", "title": "Proces podejmowania decyzji w grupie"},
            {"id": "B2C4L4", "title": "Teoria wyboru a proces decyzyjny"},
            {"id": "B2C4L5", "title": "Zrozumienie heurystyk i b≈Çƒôd√≥w poznawczych"},
            {"id": "B2C4L6", "title": "Model SEEDS w neuroprzyw√≥dztwie"},
            {"id": "B2C4L7", "title": "Analiza ryzyka i ocena potencjalnych konsekwencji"},
            {"id": "B2C4L8", "title": "Modele podejmowania decyzji w kontek≈õcie neurobiologicznym"},
            {"id": "B2C4L9", "title": "Jak rozwiƒÖzywaƒá problemy z podejmowaniem decyzji?"},
            {"id": "B2C4L10", "title": "Zastosowanie sztucznej inteligencji w podejmowaniu decyzji"}
        ],        5: [  # B≈Çƒôdy poznawcze w decyzjach
            {"id": "B2C5L1", "title": "Rozpoznawanie b≈Çƒôd√≥w poznawczych"},
            {"id": "B2C5L2", "title": "Efekt potwierdzenia w pracy lidera"},
            {"id": "B2C5L3", "title": "Efekt pewno≈õci wstecznej i jego wp≈Çyw na zarzƒÖdzanie"},
            {"id": "B2C5L4", "title": "Nadmierny optymizm ‚Äì rozpoznanie i r√≥wnowa≈ºenie"},
            {"id": "B2C5L5", "title": "B≈ÇƒÖd dostƒôpno≈õci w decyzjach kierowniczych"},
            {"id": "B2C5L6", "title": "Efekt zakotwiczenia w negocjacjach i planowaniu"},
            {"id": "B2C5L7", "title": "B≈Çƒôdy atrybucji w ocenie pracownik√≥w"},
            {"id": "B2C5L8", "title": "Przeciwdzia≈Çanie b≈Çƒôdom poznawczym w zespole"},
            {"id": "B2C5L9", "title": "Strategie redukcji b≈Çƒôd√≥w poznawczych"},
            {"id": "B2C5L10", "title": "Systematyczne podejmowanie decyzji jako przeciwwaga dla b≈Çƒôd√≥w"}
        ],        6: [  # Neurologiczne aspekty zmiany i innowacji
            {"id": "B2C6L1", "title": "Neuroplastyczno≈õƒá i jej zastosowanie w przyw√≥dztwie"},
            {"id": "B2C6L2", "title": "Jak m√≥zg reaguje na zmiany organizacyjne"},
            {"id": "B2C6L3", "title": "Op√≥r przed zmianƒÖ z perspektywy neurobiologicznej"},
            {"id": "B2C6L4", "title": "Wspieranie innowacyjno≈õci z uwzglƒôdnieniem funkcji m√≥zgu"},
            {"id": "B2C6L5", "title": "Kreowanie ≈õrodowiska wspierajƒÖcego neuroplastyczno≈õƒá"},
            {"id": "B2C6L6", "title": "Neurobiologia kreatywno≈õci i innowacji"},
            {"id": "B2C6L7", "title": "ZarzƒÖdzanie stresem zwiƒÖzanym ze zmianƒÖ"},
            {"id": "B2C6L8", "title": "Tworzenie nawyk√≥w wspierajƒÖcych adaptacjƒô"},
            {"id": "B2C6L9", "title": "Wdra≈ºanie zmian z uwzglƒôdnieniem reakcji m√≥zgu"},
            {"id": "B2C6L10", "title": "Budowanie odporno≈õci zespo≈Çu na zmiany"}
        ],        7: [  # Motywowanie siebie i innych
            {"id": "B3C7L1", "title": "Neurobiologia motywacji"},
            {"id": "B3C7L2", "title": "Uk≈Çad nagrody w m√≥zgu i jego rola w motywacji"},
            {"id": "B3C7L3", "title": "Wewnƒôtrzna vs zewnƒôtrzna motywacja - podej≈õcie naukowe"},
            {"id": "B3C7L4", "title": "Jak budowaƒá zaanga≈ºowanie zespo≈Çu?"},
            {"id": "B3C7L5", "title": "Motywacja a hormony i neuroprzeka≈∫niki"},
            {"id": "B3C7L6", "title": "Rozpoznawanie i wspieranie potrzeb motywacyjnych pracownik√≥w"},
            {"id": "B3C7L7", "title": "Techniki wzmacniania d≈Çugoterminowej motywacji"},
            {"id": "B3C7L8", "title": "Poczucie sensu jako kluczowy czynnik motywacyjny"},
            {"id": "B3C7L9", "title": "Budowanie ≈õrodowiska wspierajƒÖcego motywacjƒô"},
            {"id": "B3C7L10", "title": "Neuronaukowe podej≈õcie do cel√≥w i ich realizacji"}
        ],        8: [  # Neurobiologia stresu w przyw√≥dztwie
            {"id": "B3C8L1", "title": "Reakcja stresu w m√≥zgu lidera"},
            {"id": "B3C8L2", "title": "Wp≈Çyw przewlek≈Çego stresu na podejmowanie decyzji"},
            {"id": "B3C8L3", "title": "Techniki redukcji stresu oparte na neurobadaniach"},
            {"id": "B3C8L4", "title": "Rozpoznawanie objaw√≥w wypalenia zawodowego"},
            {"id": "B3C8L5", "title": "Regeneracja m√≥zgu po stresie ‚Äì praktyczne strategie"},
            {"id": "B3C8L6", "title": "Stres a funkcje poznawcze istotne w przyw√≥dztwie"},
            {"id": "B3C8L7", "title": "Regulacja emocjonalna w sytuacjach wysokiego stresu"},
            {"id": "B3C8L8", "title": "Budowanie odporno≈õci psychicznej zespo≈Çu"},
            {"id": "B3C8L9", "title": "ZarzƒÖdzanie stresem w sytuacjach kryzysowych"},
            {"id": "B3C8L10", "title": "Prewencja stresu i zdrowie psychiczne lidera"}
        ],        9: [  # Rola emocji w przyw√≥dztwie
            {"id": "B3C9L1", "title": "Inteligencja emocjonalna a skuteczno≈õƒá przyw√≥dcza"},
            {"id": "B3C9L2", "title": "Neurobiologiczne podstawy empatii"},
            {"id": "B3C9L3", "title": "Rozpoznawanie i zarzƒÖdzanie w≈Çasnymi emocjami"},
            {"id": "B3C9L4", "title": "Emocje w procesie podejmowania decyzji"},
            {"id": "B3C9L5", "title": "ZarzƒÖdzanie emocjami w sytuacjach konfliktowych"},
            {"id": "B3C9L6", "title": "Budowanie zaufania przez inteligencjƒô emocjonalnƒÖ"},
            {"id": "B3C9L7", "title": "Empatia jako kluczowa kompetencja lidera"},
            {"id": "B3C9L8", "title": "Emocjonalna odporno≈õƒá w trudnych sytuacjach"},
            {"id": "B3C9L9", "title": "Komunikacja emocjonalna w zespole"},
            {"id": "B3C9L10", "title": "Rozw√≥j inteligencji emocjonalnej ‚Äì praktyczne techniki"}
        ],        10: [  # Budowanie odporno≈õci lidera
            {"id": "B4C10L1", "title": "Neurobiologiczne podstawy odporno≈õci psychicznej"},
            {"id": "B4C10L2", "title": "Budowanie odporno≈õci poprzez ≈õwiadome praktyki"},
            {"id": "B4C10L3", "title": "Radzenie sobie z niepewno≈õciƒÖ i zmienno≈õciƒÖ"},
            {"id": "B4C10L4", "title": "Techniki szybkiej regeneracji dla lider√≥w"},
            {"id": "B4C10L5", "title": "Przekszta≈Çcanie pora≈ºek w do≈õwiadczenia rozwojowe"},
            {"id": "B4C10L6", "title": "Akceptacja i praca z w≈Çasnymi ograniczeniami"},
            {"id": "B4C10L7", "title": "Wzmacnianie elastyczno≈õci poznawczej"},
            {"id": "B4C10L8", "title": "ZarzƒÖdzanie energiƒÖ psychicznƒÖ i fizycznƒÖ"},
            {"id": "B4C10L9", "title": "Praca z przekonaniami ograniczajƒÖcymi"},
            {"id": "B4C10L10", "title": "Budowanie d≈Çugotrwa≈Çej stabilno≈õci psychicznej"}
        ],        11: [  # Efektywno≈õƒá przyw√≥dcza w praktyce
            {"id": "B4C11L1", "title": "Praktyczne zastosowanie neuroprzyw√≥dztwa"},
            {"id": "B4C11L2", "title": "Skuteczne delegowanie z uwzglƒôdnieniem mocnych stron"},
            {"id": "B4C11L3", "title": "Budowanie kultury organizacyjnej wspierajƒÖcej rozw√≥j"},
            {"id": "B4C11L4", "title": "Facylitacja spotka≈Ñ z wykorzystaniem neurotechnik"},
            {"id": "B4C11L5", "title": "Przekazywanie informacji zwrotnej wspierajƒÖcej rozw√≥j"},
            {"id": "B4C11L6", "title": "Efektywne zarzƒÖdzanie czasem i priorytetami"},
            {"id": "B4C11L7", "title": "ZarzƒÖdzanie projektami z perspektywy neuroprzyw√≥dztwa"},
            {"id": "B4C11L8", "title": "Strategie osiƒÖgania d≈Çugoterminowych cel√≥w"},
            {"id": "B4C11L9", "title": "ZarzƒÖdzanie zespo≈Çami zdalnymi i hybrydowymi"},
            {"id": "B4C11L10", "title": "Budowanie wsp√≥≈Çpracy miƒôdzydzia≈Çowej"}
        ],        12: [  # Neuroprzyw√≥dztwo w kontek≈õcie globalnym
            {"id": "B4C12L1", "title": "Przyw√≥dztwo w zespo≈Çach wielokulturowych"},
            {"id": "B4C12L2", "title": "Adaptacja styl√≥w przyw√≥dczych do r√≥≈ºnych kultur"},
            {"id": "B4C12L3", "title": "Komunikacja miƒôdzykulturowa w biznesie"},
            {"id": "B4C12L4", "title": "Neurobiologia uprzedze≈Ñ i stereotyp√≥w"},
            {"id": "B4C12L5", "title": "Budowanie zr√≥≈ºnicowanych zespo≈Ç√≥w (diversity & inclusion)"},
            {"id": "B4C12L6", "title": "ZarzƒÖdzanie konfliktami w kontek≈õcie miƒôdzykulturowym"},
            {"id": "B4C12L7", "title": "Globalne trendy w przyw√≥dztwie"},
            {"id": "B4C12L8", "title": "Adaptacja do dynamicznie zmieniajƒÖcego siƒô otoczenia"},
            {"id": "B4C12L9", "title": "Przyw√≥dztwo w ≈õwiecie VUCA i BANI"},
            {"id": "B4C12L10", "title": "Budowanie globalnych relacji biznesowych"}
        ],        13: [  # Wyzwania przysz≈Ço≈õci
            {"id": "B5C13L1", "title": "Przysz≈Ço≈õƒá neuroprzyw√≥dztwa"},
            {"id": "B5C13L2", "title": "Przyw√≥dztwo w erze sztucznej inteligencji"},
            {"id": "B5C13L3", "title": "Etyczne aspekty neurotechnologii w przyw√≥dztwie"},
            {"id": "B5C13L4", "title": "Budowanie organizacji opartych na neuroprzyw√≥dztwie"},
            {"id": "B5C13L5", "title": "Adaptacja do zmian technologicznych i ich wp≈Çyw na m√≥zg"},
            {"id": "B5C13L6", "title": "Innowacje w neuronaukach i ich zastosowanie"},
            {"id": "B5C13L7", "title": "Trendy i kierunki rozwoju neuroprzyw√≥dztwa"},
            {"id": "B5C13L8", "title": "Zr√≥wnowa≈ºone przyw√≥dztwo w kontek≈õcie globalnych wyzwa≈Ñ"},
            {"id": "B5C13L9", "title": "Neuronauka a zr√≥wnowa≈ºony rozw√≥j przedsiƒôbiorstw"},
            {"id": "B5C13L10", "title": "Wizja przysz≈Ço≈õci przyw√≥dztwa opartego na wiedzy o m√≥zgu"}
        ],        14: [  # Praca z umys≈Çem lidera
            {"id": "B5C14L1", "title": "≈öwiadome przyw√≥dztwo i praca z umys≈Çem"},
            {"id": "B5C14L2", "title": "Techniki mindfulness dla lider√≥w"},
            {"id": "B5C14L3", "title": "Rozwijanie koncentracji i skupienia"},
            {"id": "B5C14L4", "title": "ZarzƒÖdzanie sobƒÖ w warunkach wysokiej presji"},
            {"id": "B5C14L5", "title": "Neuroplastyczno≈õƒá w praktyce przyw√≥dczej"},
            {"id": "B5C14L6", "title": "R√≥wnowaga ≈ºyciowa a efektywno≈õƒá poznawcza"},
            {"id": "B5C14L7", "title": "Techniki regeneracji m√≥zgu dla lider√≥w"},
            {"id": "B5C14L8", "title": "Rozwijanie kreatywno≈õci przez praktyki umys≈Çowe"},
            {"id": "B5C14L9", "title": "Praca z wewnƒôtrznym krytykiem w przyw√≥dztwie"},
            {"id": "B5C14L10", "title": "ZarzƒÖdzanie emocjami w sytuacjach wysokiego stresu"}
        ],        15: [  # Transformacja przyw√≥dcza
            {"id": "B5C15L1", "title": "Modele transformacji przyw√≥dczej"},
            {"id": "B5C15L2", "title": "Neurobiologiczne podstawy zmiany i rozwoju"},
            {"id": "B5C15L3", "title": "Przekszta≈Çcanie organizacji poprzez neuroprzyw√≥dztwo"},
            {"id": "B5C15L4", "title": "Budowanie wizji z wykorzystaniem wiedzy o m√≥zgu"},
            {"id": "B5C15L5", "title": "Przyw√≥dztwo s≈Çu≈ºebne w kontek≈õcie neurobiologicznym"},
            {"id": "B5C15L6", "title": "Coaching oparty na neuronaukach"},
            {"id": "B5C15L7", "title": "Budowanie organizacji uczƒÖcej siƒô"},
            {"id": "B5C15L8", "title": "ZarzƒÖdzanie transformacjƒÖ w kontek≈õcie funkcji m√≥zgu"},
            {"id": "B5C15L9", "title": "Neuronaukowe podej≈õcie do zarzƒÖdzania zmianƒÖ"},
            {"id": "B5C15L10", "title": "Przyw√≥dztwo przysz≈Ço≈õci ‚Äì integracja wszystkich poziom√≥w"}
        ]
    }
    
    return lessons_data.get(category_id, [])

def mark_all_lessons_as_completed(category, users_data, user_data):
    """Oznacza wszystkie lekcje w kategorii jako uko≈Ñczone"""
    user_completed_lessons = set(user_data.get("completed_lessons", []))
    
    # Dodaj wszystkie lekcje z kategorii do uko≈Ñczonych
    for lesson in category['lessons']:
        user_completed_lessons.add(lesson["id"])
    
    # Zapisz zaktualizowane dane
    user_data["completed_lessons"] = list(user_completed_lessons)
    users_data[st.session_state.username] = user_data
    save_user_data(users_data)
    
    # Wy≈õwietl powiadomienie o sukcesie
    st.toast(f"Wszystkie lekcje w kategorii {category['name']} zosta≈Çy oznaczone jako uko≈Ñczone!", icon="‚úÖ")
    
    return user_completed_lessons

def show_skill_analytics(category, user_completed_lessons):
    """Wy≈õwietla szczeg√≥≈ÇowƒÖ analizƒô nauki dla wybranej umiejƒôtno≈õci"""
    
    st.markdown(f"<h3 class='analytics-header'>Analityka nauki: {category['name']}</h3>", unsafe_allow_html=True)
    
    # Przygotuj dane o uko≈Ñczonych lekcjach
    category_lessons_ids = [lesson["id"] for lesson in category['lessons']]
    completed_category_lessons = [lesson_id for lesson_id in user_completed_lessons if lesson_id in category_lessons_ids]
    lessons_completed_count = len(completed_category_lessons)
    progress_percent = (lessons_completed_count / 10) * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Postƒôp nauki", f"{int(progress_percent)}%", delta=f"{lessons_completed_count}/10 lekcji")
    
    with col2:
        # Status nauki
        if lessons_completed_count == 0:
            status = "Nie rozpoczƒôto"
            status_color = "gray"
        elif lessons_completed_count < 5:
            status = "PoczƒÖtkujƒÖcy"
            status_color = "orange"
        elif lessons_completed_count < 10:
            status = "Zaawansowany"
            status_color = "blue"
        else:
            status = "Uko≈Ñczono"
            status_color = "green"
        
        st.markdown(f"""
        <div style="padding: 10px; border-radius: 8px; background-color: rgba(0,0,0,0.05); text-align: center;">
            <h4 style="margin:0; color: {status_color};">{status}</h4>
            <p style="margin:5px 0 0 0; font-size: 12px;">Status nauki</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        # Szacowany czas do uko≈Ñczenia
        remaining_lessons = 10 - lessons_completed_count
        estimated_days = max(1, int(remaining_lessons / 2))  # Zak≈ÇadajƒÖc 2 lekcje dziennie
        
        st.markdown(f"""
        <div style="padding: 10px; border-radius: 8px; background-color: rgba(0,0,0,0.05); text-align: center;">
            <h4 style="margin:0;">{estimated_days} dni</h4>
            <p style="margin:5px 0 0 0; font-size: 12px;">Czas do uko≈Ñczenia</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Wy≈õwietl interaktywny wykres postƒôpu nauki
    import pandas as pd
    import altair as alt
    
    # Utw√≥rz dane do wykresu
    chart_data = []
    for i, lesson in enumerate(category['lessons']):
        lesson_status = "Uko≈Ñczona" if lesson["id"] in user_completed_lessons else "Nieuko≈Ñczona"
        order = i + 1
        chart_data.append({
            "Numer lekcji": order,
            "Status": lesson_status,
            "Tytu≈Ç": lesson["title"]
        })
    
    if chart_data:
        df = pd.DataFrame(chart_data)
        
        # Stw√≥rz wykres
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('Numer lekcji:O', sort=None),
            y=alt.Y('count():Q', title="Status"),
            color=alt.Color('Status:N', scale=alt.Scale(
                domain=['Uko≈Ñczona', 'Nieuko≈Ñczona'],
                range=['#27ae60', '#e0e0e0']
            )),
            tooltip=['Numer lekcji', 'Tytu≈Ç', 'Status']
        ).properties(
            width='container',
            height=200,
            title="Postƒôp lekcji"
        )
        
        st.altair_chart(chart, use_container_width=True)
    
    # Rekomendacje dalszej nauki
    st.markdown("### Rekomendacje dalszej nauki")
    
    if lessons_completed_count < 10:        # Znajd≈∫ pierwszƒÖ nieuko≈ÑczonƒÖ lekcjƒô
        next_lesson = None
        for lesson in category['lessons']:
            if lesson["id"] not in user_completed_lessons:
                next_lesson = lesson
                break
        
        if next_lesson:
            # Naprawiamy problematyczny skrypt JavaScript            
            st.markdown(f"""
            <div class="next-lesson-recommendation">
                <h4>Nastƒôpna rekomendowana lekcja:</h4>
                <div class="recommended-lesson-item">
                    <span class="recommended-lesson-icon">üìù</span>
                    <span class="recommended-lesson-title">{next_lesson['title']}</span>
                </div>
                <button id="start-recommended-lesson" class="start-recommended-button">Rozpocznij naukƒô</button>
            </div>
            
            <script>
                document.getElementById('start-recommended-lesson').addEventListener('click', function() {{
                    /* Symuluj klikniƒôcie w odpowiedni przycisk rozpoczƒôcia lekcji */
                    const buttons = document.querySelectorAll('button[kind="secondary"]');
                    for (let button of buttons) {{
                        if (button.textContent.includes('‚ñ∂Ô∏è')) {{
                            button.click();
                            break;
                        }}
                    }}
                }});
            </script>
            """, unsafe_allow_html=True)
    else:
        st.success("Gratulacje! Uko≈Ñczy≈Çe≈õ wszystkie lekcje w tej kategorii. Spr√≥buj sprawdziƒá inne powiƒÖzane kategorie.")
    
    # Dodaj style CSS dla tego komponentu
    st.markdown("""
    <style>
    .analytics-header {
        color: #2980B9;
        border-bottom: 2px solid #eee;
        padding-bottom: 10px;
        margin-top: 30px;
    }
    
    .next-lesson-recommendation {
        background: linear-gradient(135deg, rgba(100, 180, 255, 0.1) 0%, rgba(70, 150, 220, 0.2) 100%);
        border-radius: 12px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid rgba(70, 150, 220, 0.2);
    }
    
    .recommended-lesson-item {
        display: flex;
        align-items: center;
        background: white;
        padding: 12px;
        border-radius: 8px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .recommended-lesson-icon {
        font-size: 24px;
        margin-right: 15px;
    }
    
    .recommended-lesson-title {
        font-weight: 500;
    }
    
    .start-recommended-button {
        background: #2980B9;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        margin-top: 10px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }
    
    .start-recommended-button:hover {
        background: #3498db;
        transform: translateY(-2px);
        box-shadow: 0 5px 10px rgba(0,0,0,0.1);
    }
    </style>
    """, unsafe_allow_html=True)
    
    return

def get_available_lessons():
    """Odczytuje dostƒôpne lekcje z plik√≥w i przyporzƒÖdkowuje je do odpowiednich blok√≥w i kategorii"""
    import os
    import json
    
    # ≈öcie≈ºka do folderu z lekcjami
    lessons_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "lessons")
    
    # Sprawd≈∫, czy folder istnieje
    if not os.path.exists(lessons_dir):
        st.warning(f"Folder lekcji nie istnieje: {lessons_dir}")
        return []
    
    # Lista dostƒôpnych lekcji
    available_lessons = []
    
    # Przeszukaj folder lessons
    for file_name in os.listdir(lessons_dir):
        # Ka≈ºdy plik z .json to lekcja
        if file_name.endswith('.json'):
            try:
                # Pe≈Çna ≈õcie≈ºka do pliku
                file_path = os.path.join(lessons_dir, file_name)
                
                # Odczytaj zawarto≈õƒá pliku JSON
                with open(file_path, 'r', encoding='utf-8') as file:
                    lesson_data = json.load(file)
                
                # Pobierz ID lekcji z pliku
                lesson_id = lesson_data.get('id', '')
                
                # Sprawd≈∫, czy ID jest zgodne z formatem "BxCyLz" (np. B1C1L1)
                if lesson_id and lesson_id.startswith('B') and 'C' in lesson_id and 'L' in lesson_id:
                    # Wyodrƒôbnij numery bloku, kategorii i lekcji z ID
                    block_num, rest = lesson_id.split('B')[1].split('C')
                    category_num, lesson_num = rest.split('L')
                    
                    # Konwersja na liczby ca≈Çkowite
                    try:
                        block_num = int(block_num)
                        category_num = int(category_num)
                        lesson_num = int(lesson_num)
                        
                        # Dodaj informacje do listy dostƒôpnych lekcji
                        available_lessons.append({
                            'id': lesson_id,
                            'title': lesson_data.get('title', 'Brak tytu≈Çu'),
                            'block': block_num,
                            'category': category_num,
                            'lesson_number': lesson_num,
                            'difficulty': lesson_data.get('difficulty', 'beginner'),
                            'file_path': file_path
                        })
                    except ValueError:
                        # Je≈õli nie mo≈ºna przekonwertowaƒá na liczby ca≈Çkowite, dodaj samƒÖ nazwƒô pliku
                        available_lessons.append(lesson_id)
                else:
                    # Je≈õli ID nie pasuje do formatu, po prostu dodaj nazwƒô pliku bez rozszerzenia
                    lesson_id = os.path.splitext(file_name)[0]
                    available_lessons.append(lesson_id)
                    
            except (json.JSONDecodeError, IOError) as e:
                st.error(f"B≈ÇƒÖd odczytu pliku {file_name}: {e}")
                # Dodaj samƒÖ nazwƒô pliku w przypadku b≈Çƒôdu
                lesson_id = os.path.splitext(file_name)[0]
                available_lessons.append(lesson_id)
        
        # Obs≈Çuga plik√≥w Markdown, kt√≥re mogƒÖ nie mieƒá struktury JSON
        elif file_name.endswith('.md'):
            lesson_id = os.path.splitext(file_name)[0]
            available_lessons.append(lesson_id)
    
    # Opcjonalnie - wy≈õwietl debug info
    if st.session_state.get('dev_mode', False) and st.sidebar.checkbox("Debug lekcji", False):
        st.sidebar.write("Znalezione lekcje:")
        for lesson in available_lessons:
            if isinstance(lesson, dict):
                st.sidebar.write(f"- {lesson['id']}: Blok {lesson['block']}, Kategoria {lesson['category']}, Numer {lesson['lesson_number']}")
            else:
                st.sidebar.write(f"- {lesson} (tylko ID)")
    
    return available_lessons

# Dodajmy funkcjƒô get_categories, kt√≥rej brakuje

def get_categories():
    """
    Zwraca s≈Çownik wszystkich kategorii umiejƒôtno≈õci.
    
    Returns:
        dict: S≈Çownik kategorii umiejƒôtno≈õci
    """
    return {
        "neuroanatomy": {
            "name": "Neuroanatomia przyw√≥dztwa",
            "icon": "üß†",
            "description": "Podstawy budowy i funkcji m√≥zgu zwiƒÖzane z przyw√≥dztwem",
            "block": 1
        },
        "neurocognition": {
            "name": "Funkcje poznawcze lidera",
            "icon": "üîç",
            "description": "Procesy poznawcze istotne w przyw√≥dztwie: uwaga, pamiƒôƒá, podejmowanie decyzji",
            "block": 1
        },
        "neuroplasticity": {
            "name": "Neuroplastyczno≈õƒá w przyw√≥dztwie",
            "icon": "üîÑ",
            "description": "Zdolno≈õƒá m√≥zgu do adaptacji i zmiany w kontek≈õcie rozwoju umiejƒôtno≈õci przyw√≥dczych",
            "block": 1
        },
        "decision_making": {
            "name": "Neurobiologia decyzji",
            "icon": "‚öñÔ∏è",
            "description": "Procesy neuronalne towarzyszƒÖce podejmowaniu decyzji liderskich",
            "block": 2
        },
        "risk_assessment": {
            "name": "Ocena ryzyka",
            "icon": "üìä",
            "description": "Neuronalne podstawy szacowania i zarzƒÖdzania ryzykiem",
            "block": 2
        },
        "emotional_intelligence": {
            "name": "Inteligencja emocjonalna",
            "icon": "‚ù§Ô∏è",
            "description": "Rozpoznawanie i zarzƒÖdzanie emocjami w kontek≈õcie przyw√≥dztwa",
            "block": 3
        },
        "motivation": {
            "name": "Systemy motywacyjne",
            "icon": "üöÄ",
            "description": "Neurobiologiczne podstawy motywacji i ich znaczenie w przyw√≥dztwie",
            "block": 3
        },
        "stress_management": {
            "name": "ZarzƒÖdzanie stresem",
            "icon": "üßò",
            "description": "Wp≈Çyw stresu na m√≥zg i techniki zarzƒÖdzania nim w roli lidera",
            "block": 3
        },
        "communication": {
            "name": "Neuronauka komunikacji",
            "icon": "üí¨",
            "description": "Neurobiologiczne podstawy efektywnej komunikacji liderskiej",
            "block": 4
        },
        "team_dynamics": {
            "name": "Dynamika zespo≈Çu",
            "icon": "üë•",
            "description": "Neuronaukowe podej≈õcie do budowania i prowadzenia zespo≈Ç√≥w",
            "block": 4
        },
        "adaptability": {
            "name": "Adaptacyjno≈õƒá",
            "icon": "ü¶é",
            "description": "Neuroplastyczno≈õƒá i zdolno≈õƒá do adaptacji w zmieniajƒÖcym siƒô ≈õrodowisku",
            "block": 4
        },
        "innovation": {
            "name": "Neurobiologia innowacji",
            "icon": "üí°",
            "description": "Neuronalne podstawy kreatywno≈õci i innowacyjno≈õci w przyw√≥dztwie",
            "block": 5
        },
        "future_leadership": {
            "name": "Przyw√≥dztwo przysz≈Ço≈õci",
            "icon": "üîÆ",
            "description": "Integracja neurotechnologii z rozwojem umiejƒôtno≈õci przyw√≥dczych",
            "block": 5
        }
    }
