import streamlit as st

def zen_header(title, subtitle=None):
    """
    Tworzy nag≈Ç√≥wek dla strony.
    
    Parametry:
    - title: Tytu≈Ç strony
    - subtitle: Podtytu≈Ç (opcjonalny)
    """
    st.markdown(f"<h1 class='zen-header'>{title}</h1>", unsafe_allow_html=True)
    if subtitle:
        st.markdown(f"<p class='zen-subtitle'>{subtitle}</p>", unsafe_allow_html=True)

def quote_block(text, author=None):
    """
    Tworzy blok cytatu.
    
    Parametry:
    - text: Tekst cytatu
    - author: Autor cytatu (opcjonalnie)
    """
    author_html = f'<div style="text-align: right; font-style: italic;">‚Äî {author}</div>' if author else ""
    
    quote_html = f"""
    <div class="quote-block">
        <div class="quote-text">{text}</div>
        {author_html}
    </div>
    """
    
    st.markdown(quote_html, unsafe_allow_html=True)

def tip_block(text, type="tip", title=None, icon=None):
    """
    Tworzy blok ze wskaz√≥wkƒÖ, ostrze≈ºeniem lub informacjƒÖ.
    
    Parametry:
    - text: Tekst wskaz√≥wki
    - type: Typ bloku (tip, warning, info)
    - title: Opcjonalny tytu≈Ç bloku
    - icon: Niestandardowa ikona (zastƒôpuje domy≈õlnƒÖ ikonƒô)
    """
    # U≈ºywamy klas zamiast inline styl√≥w
    css_class = f"tip-block tip-{type}"
    
    default_icon = "üí°" if type == "tip" else ("‚ö†Ô∏è" if type == "warning" else "‚ÑπÔ∏è")
    
    # U≈ºyj niestandardowej ikony, je≈õli podana, w przeciwnym razie u≈ºyj domy≈õlnej
    display_icon = icon if icon else default_icon
    
    # Dodaj tytu≈Ç, je≈õli jest podany
    title_html = f'<div class="tip-title">{title}</div>' if title else ""
    
    tip_html = f"""
    <div class="{css_class}">
        <div class="tip-content">
            <span class="tip-icon">{display_icon}</span>
            <div>
                {title_html}
                <div>{text}</div>
            </div>
        </div>
    </div>
    """
    
    st.markdown(tip_html, unsafe_allow_html=True)

def content_section(title, content, collapsed=True, icon=None, border_color=None):
    """
    Wy≈õwietla sekcjƒô z tre≈õciƒÖ, wykorzystujƒÖca CSS zamiast JavaScript
    
    Parametry:
    - title: Tytu≈Ç sekcji
    - content: Tre≈õƒá HTML do wy≈õwietlenia w sekcji
    - collapsed: Czy sekcja ma byƒá domy≈õlnie zwiniƒôta (obecnie tylko informacyjnie)
    - icon: Emoji lub ikona do wy≈õwietlenia obok tytu≈Çu (opcjonalne)
    - border_color: Kolor obramowania sekcji w formacie HEX (opcjonalne)
    """
    collapsed_class = "collapsed" if collapsed else ""
    icon_html = f'<span class="icon">{icon}</span>' if icon else ""
    style = f'style="border-left-color: {border_color};"' if border_color else ""
    
    section_html = f"""
    <div class="content-section {collapsed_class}" {style}>
        <div class="section-header">
            {icon_html} {title}
        </div>
        <div class="section-content">
            {content}
        </div>
    </div>
    """
    
    st.markdown(section_html, unsafe_allow_html=True)

def section_container(title=None):
    """
    Tworzy sekcjƒô z opcjonalnym tytu≈Çem jako kontekstowy mened≈ºer.
    
    Parametry:
    - title: Tytu≈Ç sekcji (opcjonalnie)
    
    U≈ºycie:
    with section_container("Tytu≈Ç"):
        st.write("Zawarto≈õƒá")
    """
    if title:
        st.markdown(f"## {title}")
    return st.container()
